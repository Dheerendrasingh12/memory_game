{"ast":null,"code":"var _jsxFileName = \"/Users/sonu/Documents/Project/ReactJS/memory_game/src/component/GameBoard.js\",\n  _s = $RefreshSig$();\n//GameBoard.js\n\nimport React from \"react\";\nimport Data from \"./data\";\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameBoard() {\n  _s();\n  const [cardsArray, setCardsArray] = React.useState([]);\n  const [moves, setMoves] = React.useState(0);\n  const [firstCard, setFirstCard] = React.useState(null);\n  const [secondCard, setSecondCard] = React.useState(null);\n  const [stopFlip, setStopFlip] = React.useState(false);\n  const [won, setWon] = React.useState(0);\n\n  //this function start new Game\n  function NewGame() {\n    setTimeout(() => {\n      const randomOrderArray = Data.sort(() => 0.5 - Math.random());\n      setCardsArray(randomOrderArray);\n      setMoves(0);\n      setFirstCard(null);\n      setSecondCard(null);\n      setWon(0);\n    }, 1200);\n  }\n\n  //this function helps in storing the firstCard and secondCard value\n  function handleSelectedCards(item) {\n    console.log(typeof item);\n    if (firstCard !== null && firstCard.id !== item.id) {\n      setSecondCard(item);\n    } else {\n      setFirstCard(item);\n    }\n  }\n\n  // if two have been selected then we check if the images are same or not,\n  //if they are same then we stop the flipping ability\n  // else we turn them back\n  React.useEffect(() => {\n    if (firstCard && secondCard) {\n      setStopFlip(true);\n      if (firstCard.name === secondCard.name) {\n        setCardsArray(prevArray => {\n          return prevArray.map(unit => {\n            if (unit.name === firstCard.name) {\n              return {\n                ...unit,\n                matched: true\n              };\n            } else {\n              return unit;\n            }\n          });\n        });\n        setWon(preVal => preVal + 1);\n        removeSelection();\n      } else {\n        setTimeout(() => {\n          removeSelection();\n        }, 1000);\n      }\n    }\n  }, [firstCard, secondCard]);\n\n  //after the slected images have been checked for\n  //equivalency we empty the firstCard and secondCard component\n  function removeSelection() {\n    setFirstCard(null);\n    setSecondCard(null);\n    setStopFlip(false);\n    setMoves(prevValue => prevValue + 1);\n  }\n\n  //starts the game for the first time.\n  React.useEffect(() => {\n    NewGame();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Memory Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children:\n      // cards component help in coverting the\n      // data from array to visible data for screen\n      cardsArray.map(item => /*#__PURE__*/_jsxDEV(Card, {\n        item: item,\n        handleSelectedCards: handleSelectedCards,\n        toggled: item === firstCard || item === secondCard || item.matched === true,\n        stopflip: stopFlip\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), won !== 6 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments\",\n      children: [\"Moves : \", moves]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments\",\n      children: [\"???????? You Won in \", moves, \" moves ????????\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: NewGame,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(GameBoard, \"I4tC8ZZCT0/euHDBfPZow7c0MwM=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","Data","Card","jsxDEV","_jsxDEV","GameBoard","_s","cardsArray","setCardsArray","useState","moves","setMoves","firstCard","setFirstCard","secondCard","setSecondCard","stopFlip","setStopFlip","won","setWon","NewGame","setTimeout","randomOrderArray","sort","Math","random","handleSelectedCards","item","console","log","id","useEffect","name","prevArray","map","unit","matched","preVal","removeSelection","prevValue","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toggled","stopflip","onClick","_c","$RefreshReg$"],"sources":["/Users/sonu/Documents/Project/ReactJS/memory_game/src/component/GameBoard.js"],"sourcesContent":["//GameBoard.js\n\nimport React from \"react\";\nimport Data from \"./data\";\nimport Card from \"./Card\";\nfunction GameBoard() {\n  const [cardsArray, setCardsArray] = React.useState([]);\n  const [moves, setMoves] = React.useState(0);\n  const [firstCard, setFirstCard] = React.useState(null);\n  const [secondCard, setSecondCard] = React.useState(null);\n  const [stopFlip, setStopFlip] = React.useState(false);\n  const [won, setWon] = React.useState(0);\n\n  //this function start new Game\n  function NewGame() {\n    setTimeout(() => {\n      const randomOrderArray = Data.sort(() => 0.5 - Math.random());\n      setCardsArray(randomOrderArray);\n      setMoves(0);\n      setFirstCard(null);\n      setSecondCard(null);\n      setWon(0);\n    }, 1200);\n  }\n\n  //this function helps in storing the firstCard and secondCard value\n  function handleSelectedCards(item) {\n    console.log(typeof item);\n    if (firstCard !== null && firstCard.id !== item.id) {\n      setSecondCard(item);\n    } else {\n      setFirstCard(item);\n    }\n  }\n\n  // if two have been selected then we check if the images are same or not,\n  //if they are same then we stop the flipping ability\n  // else we turn them back\n  React.useEffect(() => {\n    if (firstCard && secondCard) {\n      setStopFlip(true);\n      if (firstCard.name === secondCard.name) {\n        setCardsArray((prevArray) => {\n          return prevArray.map((unit) => {\n            if (unit.name === firstCard.name) {\n              return { ...unit, matched: true };\n            } else {\n              return unit;\n            }\n          });\n        });\n        setWon((preVal) => preVal + 1);\n        removeSelection();\n      } else {\n        setTimeout(() => {\n          removeSelection();\n        }, 1000);\n      }\n    }\n  }, [firstCard, secondCard]);\n\n  //after the slected images have been checked for\n  //equivalency we empty the firstCard and secondCard component\n  function removeSelection() {\n    setFirstCard(null);\n    setSecondCard(null);\n    setStopFlip(false);\n    setMoves((prevValue) => prevValue + 1);\n  }\n\n  //starts the game for the first time.\n  React.useEffect(() => {\n    NewGame();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <h1>Memory Game</h1>\n      </div>\n      <div className=\"board\">\n        {\n          // cards component help in coverting the\n          // data from array to visible data for screen\n          cardsArray.map((item) => (\n            <Card\n              item={item}\n              key={item.id}\n              handleSelectedCards={handleSelectedCards}\n              toggled={\n                item === firstCard ||\n                item === secondCard ||\n                item.matched === true\n              }\n              stopflip={stopFlip}\n            />\n          ))\n        }\n      </div>\n\n      {won !== 6 ? (\n        <div className=\"comments\">Moves : {moves}</div>\n      ) : (\n        <div className=\"comments\">\n          ???????? You Won in {moves} moves ????????\n        </div>\n      )}\n      <button className=\"button\" onClick={NewGame}>\n        New Game\n      </button>\n    </div>\n  );\n}\n\nexport default GameBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}